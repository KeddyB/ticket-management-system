// app/api/tickets/route.ts
import { NextResponse } from 'next/server';
import { verifyToken } from '@/utils/jwt';
import { prisma } from '@/utils/db';

export async function GET(request: Request) {
  try {
    const tickets = await prisma.ticket.findMany();
    return NextResponse.json(tickets);
  } catch (error) {
    console.error(error);
    return NextResponse.json({ message: 'Error fetching tickets' }, { status: 500 });
  }
}

export async function POST(request: Request) {
  try {
    const token = request.headers.get('authorization')?.split(' ')[1];

    if (!token) {
      return NextResponse.json({ message: 'No token provided' }, { status: 401 });
    }

    const decoded = await verifyToken(token);

    if (!decoded) {
      return NextResponse.json({ message: 'Invalid token' }, { status: 401 });
    }

    const userId = decoded.userId;
    const { title, description } = await request.json();

    const newTicket = await prisma.ticket.create({
      data: {
        title,
        description,
        userId,
      },
    });

    return NextResponse.json(newTicket, { status: 201 });
  } catch (error) {
    console.error(error);
    return NextResponse.json({ message: 'Error creating ticket' }, { status: 500 });
  }
}

// app/api/tickets/[id]/route.ts
import { NextResponse } from 'next/server';
import { verifyToken } from '@/utils/jwt';
import { prisma } from '@/utils/db';

interface Params {
  id: string;
}

export async function GET(request: Request, { params }: { params: Params }) {
  try {
    const { id } = params;
    const ticket = await prisma.ticket.findUnique({
      where: {
        id,
      },
    });

    if (!ticket) {
      return NextResponse.json({ message: 'Ticket not found' }, { status: 404 });
    }

    return NextResponse.json(ticket);
  } catch (error) {
    console.error(error);
    return NextResponse.json({ message: 'Error fetching ticket' }, { status: 500 });
  }
}

export async function PUT(request: Request, { params }: { params: Params }) {
  try {
    const token = request.headers.get('authorization')?.split(' ')[1];

    if (!token) {
      return NextResponse.json({ message: 'No token provided' }, { status: 401 });
    }

    const decoded = await verifyToken(token);

    if (!decoded) {
      return NextResponse.json({ message: 'Invalid token' }, { status: 401 });
    }

    const userId = decoded.userId;
    const { id } = params;
    const { title, description } = await request.json();

    const existingTicket = await prisma.ticket.findUnique({
      where: { id }
    });

    if (!existingTicket) {
      return NextResponse.json({ message: 'Ticket not found' }, { status: 404 });
    }

    if (existingTicket.userId !== userId) {
      return NextResponse.json({ message: 'Unauthorized' }, { status: 403 });
    }

    const updatedTicket = await prisma.ticket.update({
      where: {
        id,
      },
      data: {
        title,
        description,
      },
    });

    return NextResponse.json(updatedTicket);
  } catch (error) {
    console.error(error);
    return NextResponse.json({ message: 'Error updating ticket' }, { status: 500 });
  }
}

export async function DELETE(request: Request, { params }: { params: Params }) {
  try {
    const token = request.headers.get('authorization')?.split(' ')[1];

    if (!token) {
      return NextResponse.json({ message: 'No token provided' }, { status: 401 });
    }

    const decoded = await verifyToken(token);

    if (!decoded) {
      return NextResponse.json({ message: 'Invalid token' }, { status: 401 });
    }

    const userId = decoded.userId;
    const { id } = params;

    const existingTicket = await prisma.ticket.findUnique({
      where: { id }
    });

    if (!existingTicket) {
      return NextResponse.json({ message: 'Ticket not found' }, { status: 404 });
    }

    if (existingTicket.userId !== userId) {
      return NextResponse.json({ message: 'Unauthorized' }, { status: 403 });
    }

    await prisma.ticket.delete({
      where: {
        id,
      },
    });

    return NextResponse.json({ message: 'Ticket deleted' });
  } catch (error) {
    console.error(error);
    return NextResponse.json({ message: 'Error deleting ticket' }, { status: 500 });
  }
}

// app/api/tickets/[id]/comments/route.ts
import { NextResponse } from 'next/server';
import { verifyToken } from '@/utils/jwt';
import { prisma } from '@/utils/db';

interface Params {
  id: string;
}

export async function GET(request: Request, { params }: { params: Params }) {
  try {
    const { id } = params;
    const comments = await prisma.comment.findMany({
      where: {
        ticketId: id,
      },
    });

    return NextResponse.json(comments);
  } catch (error) {
    console.error(error);
    return NextResponse.json({ message: 'Error fetching comments' }, { status: 500 });
  }
}

export async function POST(request: Request, { params }: { params: Params }) {
  try {
    const token = request.headers.get('authorization')?.split(' ')[1];

    if (!token) {
      return NextResponse.json({ message: 'No token provided' }, { status: 401 });
    }

    const decoded = await verifyToken(token);

    if (!decoded) {
      return NextResponse.json({ message: 'Invalid token' }, { status: 401 });
    }

    const userId = decoded.userId;
    const { id } = params;
    const { text } = await request.json();

    const newComment = await prisma.comment.create({
      data: {
        text,
        ticketId: id,
        userId,
      },
    });

    return NextResponse.json(newComment, { status: 201 });
  } catch (error) {
    console.error(error);
    return NextResponse.json({ message: 'Error creating comment' }, { status: 500 });
  }
}

// app/api/auth/me/route.ts
import { NextResponse } from 'next/server';
import { verifyToken } from '@/utils/jwt';
import { prisma } from '@/utils/db';

export async function GET(request: Request) {
  try {
    const token = request.headers.get('authorization')?.split(' ')[1];

    if (!token) {
      return NextResponse.json({ message: 'No token provided' }, { status: 401 });
    }

    const decoded = await verifyToken(token);

    if (!decoded) {
      return NextResponse.json({ message: 'Invalid token' }, { status: 401 });
    }

    const userId = decoded.userId;

    const user = await prisma.user.findUnique({
      where: {
        id: userId,
      },
    });

    if (!user) {
      return NextResponse.json({ message: 'User not found' }, { status: 404 });
    }

    const { password, ...userWithoutPassword } = user;

    return NextResponse.json(userWithoutPassword);
  } catch (error) {
    console.error(error);
    return NextResponse.json({ message: 'Error fetching user' }, { status: 500 });
  }
}
